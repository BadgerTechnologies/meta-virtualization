From 2a3ccc8079040a7e783b8a9091618878e7cf0719 Mon Sep 17 00:00:00 2001
From: Dengke Du <dengke.du@windriver.com>
Date: Mon, 11 Mar 2019 09:14:09 +0800
Subject: [PATCH] ceph: fix build errors for cross compile

1. set the cross compile sysroot to find the rocksdb library
2. correct the install path for library in Distutils.cmake
3. remove / disable the sanity_check(), for some reasong the
   sanity check gets the wrong settings and will not link 
   correctly, but the actual build works correctly, this needs
   more investigation later, earlier versions of the patch also
   removed it but no comment on why. (sgw)

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Dengke Du <dengke.du@windriver.com>

Adjust context for v14.2.3

Signed-off-by: He Zhe <zhe.he@windriver.com>
Signed-off-by: Sakib Sajal <sakib.sajal@windriver.com>
Signed-off-by: Saul Wold <saul.wold@windriver.com>

---
 cmake/modules/Distutils.cmake      | 25 +++++--------------------
 cmake/modules/FindRocksDB.cmake    |  4 ++--
 src/compressor/zstd/CMakeLists.txt |  2 +-
 src/pybind/cephfs/setup.py         | 18 +++++-------------
 src/pybind/rados/setup.py          | 11 ++---------
 src/pybind/rbd/setup.py            | 18 +++++-------------
 src/pybind/rgw/setup.py            | 18 +++++-------------
 7 files changed, 25 insertions(+), 71 deletions(-)

diff --git a/cmake/modules/Distutils.cmake b/cmake/modules/Distutils.cmake
index ff01aaf81..18656c5a5 100644
--- a/cmake/modules/Distutils.cmake
+++ b/cmake/modules/Distutils.cmake
@@ -18,17 +18,8 @@ function(distutils_install_module name)
   cmake_parse_arguments(DU "" "INSTALL_SCRIPT" "" ${ARGN})
   install(CODE "
     set(options --prefix=${CMAKE_INSTALL_PREFIX})
-    if(DEFINED ENV{DESTDIR})
-      if(EXISTS /etc/debian_version)
-        list(APPEND options --install-layout=deb)
-      endif()
-      list(APPEND options
-        --root=\$ENV{DESTDIR}
-        --single-version-externally-managed)
-    endif()
-    if(NOT \"${DU_INSTALL_SCRIPT}\" STREQUAL \"\")
-      list(APPEND options --install-script=${DU_INSTALL_SCRIPT})
-    endif()
+    list(APPEND options --root=${CMAKE_DESTDIR})
+    list(APPEND options --install-lib=${PYTHON_SITEPACKAGES_DIR})
     execute_process(
     COMMAND ${Python3_EXECUTABLE}
         setup.py install \${options}
@@ -50,7 +41,7 @@ function(distutils_add_cython_module target name src)
   # Note: no quotes, otherwise distutils will execute "/usr/bin/ccache gcc"
   # CMake's implicit conversion between strings and lists is wonderful, isn't it?
   set(cflags ${COMPILE_OPTIONS})
-  list(APPEND cflags -iquote${CMAKE_SOURCE_DIR}/src/include -w)
+  list(APPEND cflags -iquote${CMAKE_SOURCE_DIR}/src/include -w --sysroot=${CMAKE_SYSROOT})
   # This little bit of magic wipes out __Pyx_check_single_interpreter()
   # Note: this is reproduced in distutils_install_cython_module
   list(APPEND cflags -D'void0=dead_function\(void\)')
@@ -108,14 +99,8 @@ function(distutils_install_cython_module name)
     set(ENV{CEPH_LIBDIR} \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")
 
     set(options --prefix=${CMAKE_INSTALL_PREFIX})
-    if(DEFINED ENV{DESTDIR})
-      if(EXISTS /etc/debian_version)
-        list(APPEND options --install-layout=deb)
-      endif()
-      list(APPEND options --root=\$ENV{DESTDIR})
-    else()
-      list(APPEND options --root=/)
-    endif()
+    list(APPEND options --root=${CMAKE_DESTDIR})
+    list(APPEND options --install-lib=${PYTHON_SITEPACKAGES_DIR})
     execute_process(
        COMMAND
            ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/setup.py
diff --git a/cmake/modules/FindRocksDB.cmake b/cmake/modules/FindRocksDB.cmake
index c5dd3dfaf..be38597af 100644
--- a/cmake/modules/FindRocksDB.cmake
+++ b/cmake/modules/FindRocksDB.cmake
@@ -9,9 +9,9 @@
 #  ROCKSDB_VERSION_MINOR
 #  ROCKSDB_VERSION_PATCH
 
-find_path(ROCKSDB_INCLUDE_DIR rocksdb/db.h)
+find_path(ROCKSDB_INCLUDE_DIR rocksdb/db.h ${CMAKE_SYSROOT})
 
-find_library(ROCKSDB_LIBRARIES rocksdb)
+find_library(ROCKSDB_LIBRARIES rocksdb ${CMAKE_SYSROOT})
 
 if(ROCKSDB_INCLUDE_DIR AND EXISTS "${ROCKSDB_INCLUDE_DIR}/rocksdb/version.h")
   foreach(ver "MAJOR" "MINOR" "PATCH")
diff --git a/src/compressor/zstd/CMakeLists.txt b/src/compressor/zstd/CMakeLists.txt
index b53b0d944..4955711a9 100644
--- a/src/compressor/zstd/CMakeLists.txt
+++ b/src/compressor/zstd/CMakeLists.txt
@@ -9,7 +9,7 @@ ExternalProject_Add(zstd_ext
   CMAKE_ARGS -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
              -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
              -DCMAKE_C_FLAGS=${ZSTD_C_FLAGS}
-             -DCMAKE_AR=${CMAKE_AR}
+             -DCMAKE_SYSROOT=${CMAKE_SYSROOT}
              -DCMAKE_POSITION_INDEPENDENT_CODE=${ENABLE_SHARED}
              -G${CMAKE_GENERATOR}
   BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libzstd
diff --git a/src/pybind/cephfs/setup.py b/src/pybind/cephfs/setup.py
index c3d40df05..24c26c3ed 100755
--- a/src/pybind/cephfs/setup.py
+++ b/src/pybind/cephfs/setup.py
@@ -137,19 +137,11 @@ def check_sanity():
     finally:
         shutil.rmtree(tmp_dir)
 
-
-if 'BUILD_DOC' in os.environ or 'READTHEDOCS' in os.environ:
-    ext_args = {}
-    cython_constants = dict(BUILD_DOC=True)
-    cythonize_args = dict(compile_time_env=cython_constants)
-elif check_sanity():
-    ext_args = get_python_flags(['cephfs'])
-    cython_constants = dict(BUILD_DOC=False)
-    include_path = [os.path.join(os.path.dirname(__file__), "..", "rados")]
-    cythonize_args = dict(compile_time_env=cython_constants,
-                          include_path=include_path)
-else:
-    sys.exit(1)
+ext_args = get_python_flags(['cephfs'])
+cython_constants = dict(BUILD_DOC=False)
+include_path = [os.path.join(os.path.dirname(__file__), "..", "rados")]
+cythonize_args = dict(compile_time_env=cython_constants,
+                      include_path=include_path)
 
 cmdclass = {}
 try:
diff --git a/src/pybind/rados/setup.py b/src/pybind/rados/setup.py
index 0d1047825..cff85a063 100755
--- a/src/pybind/rados/setup.py
+++ b/src/pybind/rados/setup.py
@@ -131,15 +131,8 @@ def check_sanity():
     finally:
         shutil.rmtree(tmp_dir)
 
-
-if 'BUILD_DOC' in os.environ or 'READTHEDOCS' in os.environ:
-    ext_args = {}
-    cython_constants = dict(BUILD_DOC=True)
-elif check_sanity():
-    ext_args = get_python_flags(['rados'])
-    cython_constants = dict(BUILD_DOC=False)
-else:
-    sys.exit(1)
+ext_args = get_python_flags(['rados'])
+cython_constants = dict(BUILD_DOC=False)
 
 cmdclass = {}
 try:
diff --git a/src/pybind/rbd/setup.py b/src/pybind/rbd/setup.py
index 73ea4555f..e7f57ddb5 100755
--- a/src/pybind/rbd/setup.py
+++ b/src/pybind/rbd/setup.py
@@ -135,19 +135,11 @@ def check_sanity():
     finally:
         shutil.rmtree(tmp_dir)
 
-
-if 'BUILD_DOC' in os.environ or 'READTHEDOCS' in os.environ:
-    ext_args = {}
-    cython_constants = dict(BUILD_DOC=True)
-    cythonize_args = dict(compile_time_env=cython_constants)
-elif check_sanity():
-    ext_args = get_python_flags(['rados', 'rbd'])
-    cython_constants = dict(BUILD_DOC=False)
-    include_path = [os.path.join(os.path.dirname(__file__), "..", "rados")]
-    cythonize_args = dict(compile_time_env=cython_constants,
-                          include_path=include_path)
-else:
-    sys.exit(1)
+ext_args = get_python_flags(['rados', 'rbd'])
+cython_constants = dict(BUILD_DOC=False)
+include_path = [os.path.join(os.path.dirname(__file__), "..", "rados")]
+cythonize_args = dict(compile_time_env=cython_constants,
+                      include_path=include_path)
 
 cmdclass = {}
 try:
diff --git a/src/pybind/rgw/setup.py b/src/pybind/rgw/setup.py
index 663604e8f..489c9ba1f 100755
--- a/src/pybind/rgw/setup.py
+++ b/src/pybind/rgw/setup.py
@@ -135,19 +135,11 @@ def check_sanity():
     finally:
         shutil.rmtree(tmp_dir)
 
-
-if 'BUILD_DOC' in os.environ or 'READTHEDOCS' in os.environ:
-    ext_args = {}
-    cython_constants = dict(BUILD_DOC=True)
-    cythonize_args = dict(compile_time_env=cython_constants)
-elif check_sanity():
-    ext_args = get_python_flags(['rados', 'rgw'])
-    cython_constants = dict(BUILD_DOC=False)
-    include_path = [os.path.join(os.path.dirname(__file__), "..", "rados")]
-    cythonize_args = dict(compile_time_env=cython_constants,
-                          include_path=include_path)
-else:
-    sys.exit(1)
+ext_args = get_python_flags(['rados', 'rgw'])
+cython_constants = dict(BUILD_DOC=False)
+include_path = [os.path.join(os.path.dirname(__file__), "..", "rados")]
+cythonize_args = dict(compile_time_env=cython_constants,
+                      include_path=include_path)
 
 cmdclass = {}
 try:
